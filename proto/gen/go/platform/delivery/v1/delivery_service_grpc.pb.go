// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: platform/delivery/v1/delivery_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeliveryService_DeliverProposal_FullMethodName     = "/platform.delivery.v1.DeliveryService/DeliverProposal"
	DeliveryService_GetDeliveryStatus_FullMethodName   = "/platform.delivery.v1.DeliveryService/GetDeliveryStatus"
	DeliveryService_AckDelivery_FullMethodName         = "/platform.delivery.v1.DeliveryService/AckDelivery"
	DeliveryService_ReportChannelStatus_FullMethodName = "/platform.delivery.v1.DeliveryService/ReportChannelStatus"
	DeliveryService_Health_FullMethodName              = "/platform.delivery.v1.DeliveryService/Health"
)

// DeliveryServiceClient is the client API for DeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Multi-channel delivery service with fallback mechanisms
type DeliveryServiceClient interface {
	// Deliver proposal with automatic channel selection and fallback
	DeliverProposal(ctx context.Context, in *DeliverProposalRequest, opts ...grpc.CallOption) (*DeliverProposalResponse, error)
	// Check delivery status
	GetDeliveryStatus(ctx context.Context, in *GetDeliveryStatusRequest, opts ...grpc.CallOption) (*GetDeliveryStatusResponse, error)
	// Mark proposal as read/acknowledged by user
	AckDelivery(ctx context.Context, in *AckDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Report channel health status
	ReportChannelStatus(ctx context.Context, in *ReportChannelStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Health check
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type deliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryServiceClient(cc grpc.ClientConnInterface) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) DeliverProposal(ctx context.Context, in *DeliverProposalRequest, opts ...grpc.CallOption) (*DeliverProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliverProposalResponse)
	err := c.cc.Invoke(ctx, DeliveryService_DeliverProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) GetDeliveryStatus(ctx context.Context, in *GetDeliveryStatusRequest, opts ...grpc.CallOption) (*GetDeliveryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeliveryStatusResponse)
	err := c.cc.Invoke(ctx, DeliveryService_GetDeliveryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) AckDelivery(ctx context.Context, in *AckDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliveryService_AckDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) ReportChannelStatus(ctx context.Context, in *ReportChannelStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeliveryService_ReportChannelStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, DeliveryService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServiceServer is the server API for DeliveryService service.
// All implementations must embed UnimplementedDeliveryServiceServer
// for forward compatibility.
//
// Multi-channel delivery service with fallback mechanisms
type DeliveryServiceServer interface {
	// Deliver proposal with automatic channel selection and fallback
	DeliverProposal(context.Context, *DeliverProposalRequest) (*DeliverProposalResponse, error)
	// Check delivery status
	GetDeliveryStatus(context.Context, *GetDeliveryStatusRequest) (*GetDeliveryStatusResponse, error)
	// Mark proposal as read/acknowledged by user
	AckDelivery(context.Context, *AckDeliveryRequest) (*emptypb.Empty, error)
	// Report channel health status
	ReportChannelStatus(context.Context, *ReportChannelStatusRequest) (*emptypb.Empty, error)
	// Health check
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedDeliveryServiceServer()
}

// UnimplementedDeliveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeliveryServiceServer struct{}

func (UnimplementedDeliveryServiceServer) DeliverProposal(context.Context, *DeliverProposalRequest) (*DeliverProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverProposal not implemented")
}
func (UnimplementedDeliveryServiceServer) GetDeliveryStatus(context.Context, *GetDeliveryStatusRequest) (*GetDeliveryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryStatus not implemented")
}
func (UnimplementedDeliveryServiceServer) AckDelivery(context.Context, *AckDeliveryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckDelivery not implemented")
}
func (UnimplementedDeliveryServiceServer) ReportChannelStatus(context.Context, *ReportChannelStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportChannelStatus not implemented")
}
func (UnimplementedDeliveryServiceServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedDeliveryServiceServer) mustEmbedUnimplementedDeliveryServiceServer() {}
func (UnimplementedDeliveryServiceServer) testEmbeddedByValue()                         {}

// UnsafeDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServiceServer will
// result in compilation errors.
type UnsafeDeliveryServiceServer interface {
	mustEmbedUnimplementedDeliveryServiceServer()
}

func RegisterDeliveryServiceServer(s grpc.ServiceRegistrar, srv DeliveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeliveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeliveryService_ServiceDesc, srv)
}

func _DeliveryService_DeliverProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).DeliverProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_DeliverProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).DeliverProposal(ctx, req.(*DeliverProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_GetDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).GetDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_GetDeliveryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).GetDeliveryStatus(ctx, req.(*GetDeliveryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_AckDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).AckDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_AckDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).AckDelivery(ctx, req.(*AckDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_ReportChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportChannelStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).ReportChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_ReportChannelStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).ReportChannelStatus(ctx, req.(*ReportChannelStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryService_ServiceDesc is the grpc.ServiceDesc for DeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.delivery.v1.DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliverProposal",
			Handler:    _DeliveryService_DeliverProposal_Handler,
		},
		{
			MethodName: "GetDeliveryStatus",
			Handler:    _DeliveryService_GetDeliveryStatus_Handler,
		},
		{
			MethodName: "AckDelivery",
			Handler:    _DeliveryService_AckDelivery_Handler,
		},
		{
			MethodName: "ReportChannelStatus",
			Handler:    _DeliveryService_ReportChannelStatus_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _DeliveryService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/delivery/v1/delivery_service.proto",
}
