// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: platform/matching/v1/recommendation_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecommendationService_ScoreTaskCandidates_FullMethodName      = "/platform.matching.v1.RecommendationService/ScoreTaskCandidates"
	RecommendationService_BatchScoreTaskCandidates_FullMethodName = "/platform.matching.v1.RecommendationService/BatchScoreTaskCandidates"
	RecommendationService_PrecomputeSimilarities_FullMethodName   = "/platform.matching.v1.RecommendationService/PrecomputeSimilarities"
	RecommendationService_UpsertEmbedding_FullMethodName          = "/platform.matching.v1.RecommendationService/UpsertEmbedding"
	RecommendationService_FilterCandidates_FullMethodName         = "/platform.matching.v1.RecommendationService/FilterCandidates"
	RecommendationService_Health_FullMethodName                   = "/platform.matching.v1.RecommendationService/Health"
)

// RecommendationServiceClient is the client API for RecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// High-performance recommendation service for ultra-low latency matching
type RecommendationServiceClient interface {
	// Core scoring method - target latency < 200ms
	ScoreTaskCandidates(ctx context.Context, in *ScoreTaskCandidatesRequest, opts ...grpc.CallOption) (*ScoreTaskCandidatesResponse, error)
	// Batch scoring for multiple tasks (efficiency optimization)
	BatchScoreTaskCandidates(ctx context.Context, in *BatchScoreTaskCandidatesRequest, opts ...grpc.CallOption) (*BatchScoreTaskCandidatesResponse, error)
	// Precompute and cache user similarities (background job)
	PrecomputeSimilarities(ctx context.Context, in *PrecomputeSimilaritiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Embedding management
	UpsertEmbedding(ctx context.Context, in *UpsertEmbeddingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Fast candidate filtering before scoring
	FilterCandidates(ctx context.Context, in *FilterCandidatesRequest, opts ...grpc.CallOption) (*FilterCandidatesResponse, error)
	// Health check for circuit breaker
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type recommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationServiceClient(cc grpc.ClientConnInterface) RecommendationServiceClient {
	return &recommendationServiceClient{cc}
}

func (c *recommendationServiceClient) ScoreTaskCandidates(ctx context.Context, in *ScoreTaskCandidatesRequest, opts ...grpc.CallOption) (*ScoreTaskCandidatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreTaskCandidatesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_ScoreTaskCandidates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) BatchScoreTaskCandidates(ctx context.Context, in *BatchScoreTaskCandidatesRequest, opts ...grpc.CallOption) (*BatchScoreTaskCandidatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchScoreTaskCandidatesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_BatchScoreTaskCandidates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) PrecomputeSimilarities(ctx context.Context, in *PrecomputeSimilaritiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecommendationService_PrecomputeSimilarities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) UpsertEmbedding(ctx context.Context, in *UpsertEmbeddingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecommendationService_UpsertEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) FilterCandidates(ctx context.Context, in *FilterCandidatesRequest, opts ...grpc.CallOption) (*FilterCandidatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterCandidatesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_FilterCandidates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, RecommendationService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationServiceServer is the server API for RecommendationService service.
// All implementations must embed UnimplementedRecommendationServiceServer
// for forward compatibility.
//
// High-performance recommendation service for ultra-low latency matching
type RecommendationServiceServer interface {
	// Core scoring method - target latency < 200ms
	ScoreTaskCandidates(context.Context, *ScoreTaskCandidatesRequest) (*ScoreTaskCandidatesResponse, error)
	// Batch scoring for multiple tasks (efficiency optimization)
	BatchScoreTaskCandidates(context.Context, *BatchScoreTaskCandidatesRequest) (*BatchScoreTaskCandidatesResponse, error)
	// Precompute and cache user similarities (background job)
	PrecomputeSimilarities(context.Context, *PrecomputeSimilaritiesRequest) (*emptypb.Empty, error)
	// Embedding management
	UpsertEmbedding(context.Context, *UpsertEmbeddingRequest) (*emptypb.Empty, error)
	// Fast candidate filtering before scoring
	FilterCandidates(context.Context, *FilterCandidatesRequest) (*FilterCandidatesResponse, error)
	// Health check for circuit breaker
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedRecommendationServiceServer()
}

// UnimplementedRecommendationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecommendationServiceServer struct{}

func (UnimplementedRecommendationServiceServer) ScoreTaskCandidates(context.Context, *ScoreTaskCandidatesRequest) (*ScoreTaskCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreTaskCandidates not implemented")
}
func (UnimplementedRecommendationServiceServer) BatchScoreTaskCandidates(context.Context, *BatchScoreTaskCandidatesRequest) (*BatchScoreTaskCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchScoreTaskCandidates not implemented")
}
func (UnimplementedRecommendationServiceServer) PrecomputeSimilarities(context.Context, *PrecomputeSimilaritiesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrecomputeSimilarities not implemented")
}
func (UnimplementedRecommendationServiceServer) UpsertEmbedding(context.Context, *UpsertEmbeddingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEmbedding not implemented")
}
func (UnimplementedRecommendationServiceServer) FilterCandidates(context.Context, *FilterCandidatesRequest) (*FilterCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterCandidates not implemented")
}
func (UnimplementedRecommendationServiceServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedRecommendationServiceServer) mustEmbedUnimplementedRecommendationServiceServer() {}
func (UnimplementedRecommendationServiceServer) testEmbeddedByValue()                               {}

// UnsafeRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationServiceServer will
// result in compilation errors.
type UnsafeRecommendationServiceServer interface {
	mustEmbedUnimplementedRecommendationServiceServer()
}

func RegisterRecommendationServiceServer(s grpc.ServiceRegistrar, srv RecommendationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecommendationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecommendationService_ServiceDesc, srv)
}

func _RecommendationService_ScoreTaskCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreTaskCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).ScoreTaskCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_ScoreTaskCandidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).ScoreTaskCandidates(ctx, req.(*ScoreTaskCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_BatchScoreTaskCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchScoreTaskCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).BatchScoreTaskCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_BatchScoreTaskCandidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).BatchScoreTaskCandidates(ctx, req.(*BatchScoreTaskCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_PrecomputeSimilarities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecomputeSimilaritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).PrecomputeSimilarities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_PrecomputeSimilarities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).PrecomputeSimilarities(ctx, req.(*PrecomputeSimilaritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_UpsertEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).UpsertEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_UpsertEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).UpsertEmbedding(ctx, req.(*UpsertEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_FilterCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).FilterCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_FilterCandidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).FilterCandidates(ctx, req.(*FilterCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendationService_ServiceDesc is the grpc.ServiceDesc for RecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.matching.v1.RecommendationService",
	HandlerType: (*RecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScoreTaskCandidates",
			Handler:    _RecommendationService_ScoreTaskCandidates_Handler,
		},
		{
			MethodName: "BatchScoreTaskCandidates",
			Handler:    _RecommendationService_BatchScoreTaskCandidates_Handler,
		},
		{
			MethodName: "PrecomputeSimilarities",
			Handler:    _RecommendationService_PrecomputeSimilarities_Handler,
		},
		{
			MethodName: "UpsertEmbedding",
			Handler:    _RecommendationService_UpsertEmbedding_Handler,
		},
		{
			MethodName: "FilterCandidates",
			Handler:    _RecommendationService_FilterCandidates_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _RecommendationService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/matching/v1/recommendation_service.proto",
}
