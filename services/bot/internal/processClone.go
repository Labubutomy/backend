package internal

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/Labubutomy/backend/services/bot/cmd"
)

func ProcessCloneAndPush(config BotConfig, userInstallationID int64, userRepo string) (string, error) {
	ctx := context.Background()

	// 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userToken, err := getInstallationToken(config.AppID, userInstallationID, config.PrivateKeyPath)
	if err != nil {
		return "", fmt.Errorf("failed to get user token: %w", err)
	}
	userClient, err := createGitHubClient(config.AppID, userInstallationID, config.PrivateKeyPath)
	if err != nil {
		return "", fmt.Errorf("failed to create user client: %w", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∫–ª–∏–µ–Ω—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
	orgToken, err := getInstallationToken(config.AppID, config.OrgInstallID, config.PrivateKeyPath)
	if err != nil {
		return "", fmt.Errorf("failed to get org token: %w", err)
	}
	orgClient, err := createGitHubClient(config.AppID, config.OrgInstallID, config.PrivateKeyPath)
	if err != nil {
		return "", fmt.Errorf("failed to create org client: %w", err)
	}

	// 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	repos, _, err := userClient.Apps.ListRepos(ctx, nil)
	if err != nil {
		return "", fmt.Errorf("failed to list repositories: %w", err)
	}

	repoName := filepath.Base(userRepo)
	isAvailable := false
	for _, r := range repos.Repositories {
		if r.Name != nil && *r.Name == repoName {
			isAvailable = true
			break
		}
	}

	if !isAvailable {
		return "", fmt.Errorf("repository %s not found for user", userRepo)
	}
	baseDir := "./cloned_repos"
	log.Printf("üì¶ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è %s...\n", userRepo)
	targetDir, err := cmd.CloneRepository(userToken, baseDir, userRepo)
	if err != nil {
		return "", fmt.Errorf("failed to clone repository: %w", err)
	}
	defer os.RemoveAll(targetDir)

	newRepoName := fmt.Sprintf("%s-copy-%d", userRepo, time.Now().Unix())
	orgRepo, err := cmd.CreateRepository(ctx, orgClient, config.OrgName, newRepoName, userRepo)
	if err != nil {
		return "", fmt.Errorf("failed to create repository: %w", err)
	}

	err = cmd.PushRepository(orgToken, newRepoName, targetDir, orgRepo)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ, —É–¥–∞–ª—è—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π %s/%s...\n", config.OrgName, newRepoName)

		if _, deleteErr := orgClient.Repositories.Delete(ctx, config.OrgName, newRepoName); deleteErr != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π %s: %v\n", *orgRepo.FullName, deleteErr)
			return "", fmt.Errorf("failed to push repository: %w (—Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: %v)", err, deleteErr)
		}

		log.Printf("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π %s/%s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\n", config.OrgName, newRepoName)
		return "", fmt.Errorf("failed to push repository: %w", err)
	}

	return orgRepo.GetURL(), nil
}
