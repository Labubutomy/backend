package cmd

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"time"
)

func CloneRepository(token string, baseDir string, repoFullName string) (string, error) {
	repoName := filepath.Base(repoFullName)
	localRepoName := fmt.Sprintf("%s-%d", repoName, time.Now().Unix())
	targetPath := filepath.Join(baseDir, localRepoName)

	if err := os.MkdirAll(baseDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º
	cloneURL := fmt.Sprintf("https://x-access-token:%s@github.com/%s.git", token, repoFullName)

	log.Printf("üîÑ –ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π %s –≤ %s\n", cloneURL, targetPath)

	// –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	cmd := exec.Command("git", "clone", cloneURL, targetPath)

	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå Git clone output: %s\n", string(output))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è git clone: %w", err)
	}

	return targetPath, nil
}
